import { AnyObject } from '~/types';
import { VizComponent } from '../../../types/plugin';
import { VersionBasedMigrator } from '../../plugin-data-migrator';
import { Viz<%= pascalcase(name) %> } from './viz-<%= dashcase(name) %>';
import { Viz<%= pascalcase(name) %>Editor } from './viz-<%= dashcase(name) %>-editor';
import { DEFAULT_CONFIG, I<%= pascalcase(name) %>Conf } from './type';
import { translation } from './translation';

// function v2(prev: AnyObject): I<%= pascalcase(name) %>Conf {
//   return prev;
// }

class Viz<%= pascalcase(name) %>Migrator extends VersionBasedMigrator {
  readonly VERSION = 1;

  configVersions(): void {
    this.version(1, (data: any) => {
      return {
        version: 1,
        config: data,
      };
    });
//     this.version(2, (data) => {
//       const { config } = data;
//       return {
//         ...data,
//         version: 2,
//         config: v2(config),
//       };
//     });
  }

}

type ConfigType = {
  version: number;
  config: I<%= pascalcase(name) %>Conf;
};

export const <%= pascalcase(name) %>VizComponent: VizComponent = {
  displayName: 'viz.<%= camelcase(name) %>.chart_name',
  displayGroup: 'chart.groups.others',
  migrator: new Viz<%= pascalcase(name) %>Migrator(),
  name: '<%= camelcase(name) %>',
  viewRender: Viz<%= pascalcase(name) %>,
  configRender: Viz<%= pascalcase(name) %>Editor,
  createConfig: (): ConfigType => ({ version: 1, config: DEFAULT_CONFIG }),
  translation,
};
