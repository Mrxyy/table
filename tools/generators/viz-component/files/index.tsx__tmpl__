import { VizComponent } from '../../../types/plugin';
import { VersionBasedMigrator } from '../../plugin-data-migrator';
import { Viz<%= pascalcase(name) %> } from './viz-<%= dashcase(name) %>';
import { Viz<%= pascalcase(name) %>Panel } from './viz-<%= dashcase(name) %>-panel';

class Viz<%= pascalcase(name) %>Migrator extends VersionBasedMigrator {
  readonly VERSION = 1;

  configVersions(): void {
    this.version(1, (data: any) => {
      return {
        version: 1,
        config: data,
      };
    });
  }
}

  async migrate({ instanceData }: VizComponentMigrationContext): Promise<void> {
    const data = await instanceData.getItem(null);
    const instanceVersion = get(data, 'version', 0);
    const updated = this.run({ from: instanceVersion, to: VERSION }, data);
    await instanceData.setItem(null, updated);
  }

  async needMigration({ instanceData }: VizComponentMigrationContext): Promise<boolean> {
    const data = await instanceData.getItem(null);
    const instanceVersion = get(data, 'version', 0);
    const result = instanceVersion < VERSION;
    console.info(`needMigration: ${result}, from: ${instanceVersion}, to: ${VERSION}`);
    return result;
  }
}

export const <%= pascalcase(name) %>VizComponent: VizComponent = {
  displayName: '<%= pascalcase(name) %>',
  migrator: new Viz<%= pascalcase(name) %>Migrator(),
  name: '<%= camelcase(name) %>',
  viewRender: Viz<%= pascalcase(name) %>,
  configRender: Viz<%= pascalcase(name) %>Panel,
};
